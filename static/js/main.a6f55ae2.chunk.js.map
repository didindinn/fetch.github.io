{"version":3,"sources":["components/PixImage.js","components/Forms.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","PixImage","props","useState","hits","data","setData","colors","image_type","query","quantity","isLoading","setIsLoading","isError","setIsError","URL","encodeURIComponent","useEffect","a","result","fetchData","console","log","className","slice","map","img","src","largeImageURL","alt","user","downloads","href","onClick","window","open","Forms","onSubmit","e","preventDefault","scroll","name","value","type","placeholder","onChange","setQuery","pattern","min","max","onKeyDown","test","key","checked","Image_type","setImage_type","scrollToRef","ref","scrollTo","top","current","offsetTop","left","behavior","App","myRef","useRef","class","id","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6f55ae2.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react'\r\n\r\nimport \"./PixImage.css\"\r\n\r\nconst axios = require('axios');\r\n\r\nexport default function PixImage(props) {\r\n    \r\n    const [data, setData] = useState({ hits: [] });\r\n\r\n     const [colors,setColors] = useState(null);\r\n     const [image_type,setImage_type] = useState(\"photo\");\r\n     const [query,setQuery] = useState(\"query\");\r\n     const [quantity, setQuantity] = useState(12);\r\n     const [isLoading, setIsLoading] = useState(false);\r\n     const [isError, setIsError] = useState(false);\r\n\r\n    const API_KEY = '14263556-460dd996bd11666b3aafc8d29';\r\n    const URL = \"https://pixabay.com/api/?key=\"+API_KEY+\"&q=\"+encodeURIComponent(query)+\"&image_type\"+image_type+\"editors_choice=true\"+\"&colors=\"+colors;\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsError(false);\r\n            setIsLoading(true);\r\n            try {\r\n          const result = await axios(\r\n            URL,\r\n          );\r\n          setData(result.data);\r\n        }catch(error){\r\n            setIsError(true);\r\n        }\r\n          setIsLoading(false);\r\n        };\r\n        fetchData();\r\n      }, [URL]);\r\n     \r\n     console.log(data.hits)\r\n    return (\r\n        <div className=\"row\">\r\n\r\n            {isError && <div>Something went wrong ...</div>}\r\n            {isLoading ? (<div>Loading ...</div>) : ( <>\r\n      {data.hits.slice(0,quantity).map(img => (\r\n        \r\n        <div className=\"col-6 col-sm-3 p-3 text-center\">\r\n        <div className=\"card\">\r\n        <img className=\"m-3 img-fluid align-self-center PixImage\" src={img.largeImageURL} alt=\"\" /> \r\n        <div className=\"card-footer\">\r\n        <small>Author: <strong>{img.user}</strong></small>\r\n        <p className=\"fa-sm\">Downloads: {img.downloads} </p>\r\n        <button className=\"btn btn-success align-self-end m-2\" href={img.largeImageURL} onClick={() =>window.open(img.largeImageURL,'_blank')}><i className=\"fas fa-file-download\" /></button>\r\n        </div>\r\n        </div>\r\n        </div>\r\n       \r\n      ))}\r\n      </>\r\n    )}  \r\n    \r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\n\r\nexport default function Forms(props) {\r\n    const handleClick = e => {\r\n    e.preventDefault();\r\n   props.scroll();\r\n}\r\n\r\n    return (\r\n        \r\n        <div>\r\n        <form onSubmit={handleClick}>\r\n         <input name=\"Seach\" value={props.query} type=\"text\" placeholder=\"search...\" onChange={props.setQuery} />\r\n            <br />\r\n            <label>Color:  <select name=\"colors\" value=\"\" onChange=\"\">\r\n            <option value=\"Red\">Red</option>\r\n            <option value=\"Green\">{props.value}</option>\r\n            <option value=\"Blue\">blue</option>\r\n          </select> </label> <br />\r\n                        <input\r\n                    type=\"number\"\r\n                    name=\"quantity\"\r\n                    pattern=\"[0-9]*\"\r\n                    placeholder=\"results\"\r\n                    min=\"1\" max=\"20\"\r\n                    onKeyDown={e => /[\\+\\-\\.\\,]$/.test(e.key) && e.preventDefault()}/>\r\n          <br /> <label> <input name=\"imgType\" value=\"Photo\" type=\"radio\" checked={props.Image_type === \"Photo\" } onChange={props.setImage_type} /> Photo </label>\r\n          <br /> <label> <input name=\"imgType\" value=\"Illustration\" type=\"radio\" checked={props.Image_type === \"Illustration\" } onChange={props.setImage_type} /> Illustration </label>\r\n          <br /> <label> <input name=\"imgType\" value=\"Vector\" type=\"radio\" checked={props.Image_type === \"Vector\" } onChange={props.setImage_type} /> Vector </label>\r\n          <br />\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n          </form>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React,{useRef} from 'react';\nimport PixImage from './components/PixImage';\nimport Forms from './components/Forms';\n\n\n\nconst scrollToRef = (ref) => window.scrollTo({\n  top:ref.current.offsetTop, \n  left: 0,\n  behavior: 'smooth'})\nfunction App() {\n  const myRef = useRef(null)\n  const executeScroll = () => scrollToRef(myRef)\n  return (\n    <div className=\"App container-fluid bg-dark\">\n        <div className=\"row\">\n        <div className=\"col bg-dark text-center text-white\">\n          <div class=\"jumbotron bg-dark\">\n            <h1 class=\"display-4\">Welcome</h1>\n            <p class=\"lead\">to Spectral apps fetch project</p>\n            \n            <p>Content</p>\n\n          </div>\n          <hr />\n        </div>\n        </div>\n\n        <div className=\"row mt-2\">\n        <div id=\"search\" className=\"col bg-dark text-center text-white\">\n        \n    <Forms scroll={executeScroll} value=\"yellow\" />\n    <hr />\n        </div>\n        </div>\n        <div className=\"row\">\n        <div ref={myRef} id=\"gallery\" className=\"col bg-dark\">\n          <PixImage />\n          </div>\n        </div>\n       \n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}